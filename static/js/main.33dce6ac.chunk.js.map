{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","react_default","a","createElement","className","key","type","id","value","text","onChange","e","setUpdate","target","react_fontawesome_index_es","icon","onClick","deleteItem","react_flip_move_es","duration","easing","library","add","faTrash","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","handleInput","bind","assertThisInitialized","addItem","setState","Date","now","preventDefault","newItem","console","log","newItems","concat","toConsumableArray","filterdItems","filter","onSubmit","placeholder","src_ListItems","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33dce6ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n  const items = props.items;\r\n  const listItems = items.map(item =>\r\n    {\r\n      return <div className=\"List\" key={item.key}>\r\n        <p>\r\n          <input className=\"iteminput\" type=\"text\" id={item.key} value={item.text}\r\n          onChange = {\r\n            (e) => {\r\n              props.setUpdate(e.target.value, item.key)\r\n            }\r\n          }\r\n          />\r\n          <span>\r\n            <FontAwesomeIcon className=\"faicon\" icon=\"trash\"\r\n            onClick={ () => props.deleteItem(item.key)} \r\n            />\r\n          </span>\r\n        </p>\r\n\r\n      </div>\r\n    })\r\n  return(\r\n    <div>\r\n      <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n      </FlipMove>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListItems;","import React, { Component } from 'react';\nimport './App.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\nimport ListItems from './ListItems';\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if(newItem !==\"\"){\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n\n  deleteItem(key){\n    const filterdItems = this.state.items.filter(item =>\n      item.key !== key);\n      this.setState({\n        items: filterdItems\n      })\n  }\n\n  setUpdate(text, key){\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key === key){\n        item.text = text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header>\n          <form id=\"todo\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItem.text} onChange={this.handleInput} />\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItems items = {this.state.items}\n        deleteItem = {this.deleteItem}\n        setUpdate = {this.setUpdate}\n        ></ListItems>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}